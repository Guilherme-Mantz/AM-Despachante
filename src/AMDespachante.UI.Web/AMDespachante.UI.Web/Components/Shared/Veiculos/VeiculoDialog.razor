@using AMDespachante.Application.ViewModels
@using AMDespachante.Application.Services
@using AMDespachante.Domain.Extensions
@using AMDespachante.Domain.Enums
@using global::MudBlazor
@using System.ComponentModel.DataAnnotations
@using AMDespachante.UI.Web.Services.Interfaces

@inject IVeiculoService VeiculoService
@inject ISnackbar Snackbar

<MudDialog Class="px-4 py-2" Style="min-width: 520px; max-width: 520px;">
    <DialogContent>
        <div class="d-flex flex-column" style="min-height: 22rem; max-height: 28rem; overflow-y: auto;">
            <EditForm Model="@Veiculo" OnValidSubmit="Submit" style="overflow: hidden">
                <DataAnnotationsValidator />

                <MudTextField Label="Placa"
                              @bind-Value="Veiculo.Placa"
                              For="@(() => Veiculo.Placa)"
                              Immediate="true"
                              AdornmentText="Ex: ABC-1234 ou ABC1D23"
                              Adornment="Adornment.End"
                              HelperText="Placas no formato antigo (AAA-0000) ou Mercosul (AAA0A00)"
                              TransformText="@(new Func<string, string>(text => text?.ToUpper() ?? string.Empty))" />

                <MudTextField Label="Renavam"
                              Class="mt-3"
                              @bind-Value="Veiculo.Renavam"
                              For="@(() => Veiculo.Renavam)"
                              Immediate="true"
                              InputType="InputType.Number"
                              MaxLength="11" />


                <MudSelect T="TipoVeiculoEnum"
                           Label="Tipo de veículo"
                           Class="mt-6"
                           @bind-Value="@Veiculo.TipoVeiculo"
                           For="@(()=> Veiculo.TipoVeiculo)"
                           Required="true">
                    <MudSelectItem Value="default(TipoVeiculoEnum)" Disabled="true">Selecione o tipo do veículo</MudSelectItem>

                    @foreach (var servico in Enum.GetValues<TipoVeiculoEnum>())
                    {
                        <MudSelectItem Value="@servico">
                            @servico.GetEnumDisplayName()
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Label="Modelo"
                              Class="mt-3"
                              @bind-Value="Veiculo.Modelo"
                              For="@(() => Veiculo.Modelo)"
                              Immediate="true" />

                <MudNumericField Label="Ano de Fabricação"
                                 Class="mt-3"
                                 @bind-Value="AnoFabricacaoNumerico"
                                 Min="1900"
                                 Max="@DateTime.Now.Year"
                                 Immediate="true"
                                 OnBlur="() => Veiculo.AnoFabricacao = AnoFabricacaoNumerico?.ToString()" />

                <MudNumericField Label="Ano do Modelo"
                                 Class="mt-3"
                                 @bind-Value="AnoModeloNumerico"
                                 Min="1900"
                                 Max="@(DateTime.Now.Year + 1)"
                                 Immediate="true"
                                 OnBlur="() => Veiculo.AnoModelo = AnoModeloNumerico?.ToString()" />

                @* <ValidationSummary /> *@
            </EditForm>
        </div>


    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="async () => await ValidarESubmeter()">
            @(string.IsNullOrEmpty(Veiculo.CriadoPor) ? "Adicionar" : "Atualizar")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public VeiculoViewModel Veiculo { get; set; } = new();

    private int? AnoFabricacaoNumerico { get; set; }
    private int? AnoModeloNumerico { get; set; }
    private EditContext _editContext;
    private ValidationMessageStore _messageStore;

    protected override void OnInitialized()
    {
        if (int.TryParse(Veiculo.AnoFabricacao, out int anoFab))
            AnoFabricacaoNumerico = anoFab;

        if (int.TryParse(Veiculo.AnoModelo, out int anoMod))
            AnoModeloNumerico = anoMod;

        _editContext = new EditContext(Veiculo);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private async Task ValidarESubmeter()
    {
        _messageStore.Clear();

        var erros = await VeiculoService.ValidarVeiculo(Veiculo, AnoFabricacaoNumerico, AnoModeloNumerico);

        foreach (var error in erros)
        {
            foreach (var message in error.Value)
            {
                _messageStore.Add(_editContext.Field(error.Key), message);
                Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
            }
        }

        if (_editContext.Validate())
        {
            Veiculo.CriadoPor = "sys";
            Submit();
        }
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(Veiculo));
    private void Cancel() => MudDialog.Cancel();
}