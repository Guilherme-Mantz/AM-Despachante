@using global::MudBlazor

<MudDialog>
    <TitleContent>
        <MudText>@Title</MudText>
    </TitleContent>
    <DialogContent>
        @if (ContentTemplate != null)
        {
            @ContentTemplate
        }
        else
        {
            <MudText>@Content</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="@CancelButtonColor">@CancelText</MudButton>
        <MudButton Color="@ConfirmButtonColor" OnClick="Submit">@ConfirmText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public string Title { get; set; }
    [Parameter] public string Content { get; set; }
    [Parameter] public RenderFragment ContentTemplate { get; set; }
    [Parameter] public string ConfirmText { get; set; } = "Ok";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public Color ConfirmButtonColor { get; set; } = Color.Primary;
    [Parameter] public Color CancelButtonColor { get; set; } = Color.Default;
    [Parameter] public EventCallback<bool> OnConfirm { get; set; }

    private async Task Submit()
    {
        if (OnConfirm.HasDelegate)
            await OnConfirm.InvokeAsync(true);

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    /*// Para abrir um diálogo de exclusão
    private async Task OpenDeleteDialogAsync(RecursoViewModel recurso)
    {
    var parameters = new DialogParameters
        {
        { "Title", "Confirmar Exclusão" },
        { "Content", $"Deseja realmente excluir o recurso '{recurso.Nome}'?" },
        { "ConfirmButtonColor", Color.Error },
        { "ConfirmText", "Excluir" },
        { "OnConfirm", EventCallback.Factory.Create<bool>(this, async () =>
            await DeleteRecursoAsync(recurso.Id)) }
    };

    var options = new DialogOptions
        {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.ExtraSmall
    };

    await DialogService.ShowAsync<GenericDialog>(string.Empty, parameters, options);
    }

    // Para um diálogo simples
    private async Task OpenSimpleDialogAsync()
    {
    var parameters = new DialogParameters
        {
        { "Title", "Aviso" },
        { "Content", "Operação realizada com sucesso!" }
    };

    await DialogService.ShowAsync<GenericDialog>(string.Empty, parameters);
    }

    // Para um diálogo com conteúdo customizado
    private async Task OpenCustomDialogAsync()
    {
    var parameters = new DialogParameters
        {
        { "Title", "Detalhes do Recurso" },
        { "ContentTemplate", builder =>
            {
            builder.AddMarkupContent(0, "<div class='pa-4'>");
            builder.AddMarkupContent(1, "<p>Conteúdo personalizado aqui...</p>");
            builder.AddMarkupContent(2, "</div>");
    }}
    };

    await DialogService.ShowAsync<GenericDialog>(string.Empty, parameters);
    }

    // Atualizar o botão de delete na tabela
    <MudIconButton Icon="@Icons.Material.Filled.Delete"
               Color="Color.Error"
               Size="Size.Small"
               OnClick="@(() => OpenDeleteDialogAsync(context))" />*/
}