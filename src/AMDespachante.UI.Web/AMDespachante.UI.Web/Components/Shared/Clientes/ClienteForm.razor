@using System.ComponentModel.DataAnnotations
@using AMDespachante.Application.ViewModels
@using AMDespachante.Domain.Extensions
@using AMDespachante.UI.Web.Components.Shared.Veiculos
@using global::MudBlazor

<EditForm Model="@Cliente" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Class="mt-4 mb-3">
        <MudItem xs="12" sm="8">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h5" Class="mb-4">Dados do Cliente</MudText>

                    <MudTextField Label="Nome"
                    @bind-Value="Cliente.Nome"
                    For="@(() => Cliente.Nome)" />
                    <MudTextField Label="Email"
                    Class="mt-3"
                    @bind-Value="Cliente.Email"
                    For="@(() => Cliente.Email)" />

                    <MudPaper Elevation="0" Class="mt-4">
                        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0" Class="mt-1" @bind-ActivePanelIndex="_activeIndex">
                            <MudTabPanel Text="CPF" Icon="@Icons.Material.Filled.Person" />
                            <MudTabPanel Text="CNPJ" Icon="@Icons.Material.Filled.Business" />
                        </MudTabs>

                        <MudTextField @bind-Value="Cliente.DocumentoFiscal"
                        For="@(() => Cliente.DocumentoFiscal)"
                        Mask="@(GetDocumentoMask())"
                        Placeholder="@($"Digite o {TipoDocumento}...")"
                        Immediate="true"
                        Class="mt-2" />
                    </MudPaper>
                    <MudTextField Label="Telefone"
                    Class="mt-3"
                    @bind-Value="Cliente.Telefone"
                    For="@(() => Cliente.Telefone)"
                    Mask="@(new PatternMask("(00) 00000-0000"))"
                    Immediate="true" />

                    <MudDivider Class="my-4" />

                    <MudCheckBox @bind-Value="Cliente.EhEstacionamento"
                    Color="Color.Primary"
                    Label="É Estacionamento"
                    For="@(() => Cliente.EhEstacionamento)"
                    Class="mt-3" />

                    <MudCheckBox @bind-Value="Cliente.PagaMensalidade"
                    Color="Color.Primary"
                    Label="Paga Mensalidade"
                    For="@(() => Cliente.PagaMensalidade)"
                    Class="mt-3" />

                    @if (Cliente.PagaMensalidade)
                    {
                        <MudNumericField Label="Valor da Mensalidade"
                        @bind-Value="Cliente.ValorMensalidade"
                        For="@(() => Cliente.ValorMensalidade)"
                        Format="N2"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                        Class="mt-3" />

                        <MudDatePicker Label="Data do Próximo Vencimento"
                        @bind-Date="Cliente.DataProximoVencimento"
                        For="@(() => Cliente.DataProximoVencimento)"
                        Class="mt-3" />
                    }

                    <MudDivider Class="my-4" />

                    <MudText Typo="Typo.h6" Class="mb-3">Veículos</MudText>

                    @if (Cliente.Veiculos != null && Cliente.Veiculos.Any())
                    {
                        <MudTable Items="@Cliente.Veiculos.ToList()" Hover="true" Dense="true" Class="mb-3">
                            <HeaderContent>
                                <MudTh>Placa</MudTh>
                                <MudTh>Tipo</MudTh>
                                <MudTh>Modelo</MudTh>
                                <MudTh>Ano</MudTh>
                                <MudTh>Ações</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="veiculo">
                                <MudTd>@veiculo.Placa</MudTd>
                                <MudTd>@veiculo.TipoVeiculo.GetEnumDisplayName()</MudTd>
                                <MudTd>@veiculo.Modelo</MudTd>
                                <MudTd>@veiculo.AnoFabricacao/@veiculo.AnoModelo</MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditarVeiculo(veiculo))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => RemoverVeiculo(veiculo))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="mb-3">Nenhum veículo cadastrado.</MudAlert>
                    }

                    <MudButton Variant="Variant.Outlined"
                    StartIcon="@Icons.Material.Filled.Add"
                    Color="Color.Primary"
                    OnClick="AdicionarVeiculo">
                        Adicionar Veículo
                    </MudButton>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Href="/clientes"
                               Variant="Variant.Outlined"
                               Color="Color.Secondary">
                        Cancelar
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto">
                        @(Cliente.Id == Guid.Empty ? "Criar" : "Atualizar")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public ClienteViewModel Cliente { get; set; }

    [Parameter]
    public EventCallback<ClienteViewModel> OnSubmit { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    private string TipoDocumento => _activeIndex == 0 ? "CPF" : "CNPJ";
    private int _activeIndex = 0;

    private PatternMask GetDocumentoMask()
    {
        return _activeIndex == 0
            ? new PatternMask("000.000.000-00")
            : new PatternMask("00.000.000/0000-00");
    }

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(Cliente);
        }
    }

    protected override Task OnInitializedAsync()
    {
        if(Cliente is null)
        {
            Cliente = new ClienteViewModel();
        }

        if (Cliente.Veiculos == null)
        {
            Cliente.Veiculos = new List<VeiculoViewModel>();
        }

        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (!string.IsNullOrEmpty(Cliente.DocumentoFiscal))
        {
            var doc = System.Text.RegularExpressions.Regex.Replace(Cliente.DocumentoFiscal, @"\D", "");
            _activeIndex = doc.Length <= 11 ? 0 : 1;

            StateHasChanged();
        }
    }

    private async Task AdicionarVeiculo()
    {
        var veiculo = new VeiculoViewModel
            {
                Id = Guid.NewGuid(),
                ClienteId = Cliente.Id
            };

        var parameters = new DialogParameters
            {
                ["Veiculo"] = veiculo
            };

        var dialog = await DialogService.ShowAsync<VeiculoDialog>("Adicionar Veículo", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var novoVeiculo = result.Data as VeiculoViewModel;

            if (Cliente.Veiculos == null)
            {
                Cliente.Veiculos = new List<VeiculoViewModel>();
            }

            Cliente.Veiculos.Add(novoVeiculo);
            StateHasChanged();
        }
    }

    private async Task EditarVeiculo(VeiculoViewModel veiculo)
    {
        var veiculoEditavel = new VeiculoViewModel
        {
            Id = veiculo.Id,
            Placa = veiculo.Placa,
            Renavam = veiculo.Renavam,
            TipoVeiculo = veiculo.TipoVeiculo,
            Modelo = veiculo.Modelo,
            AnoFabricacao = veiculo.AnoFabricacao,
            AnoModelo = veiculo.AnoModelo,
            ClienteId = veiculo.ClienteId,
            CriadoPor = veiculo.CriadoPor
        };

        var parameters = new DialogParameters
        {
            ["Veiculo"] = veiculoEditavel
        };

        var dialog = await DialogService.ShowAsync<VeiculoDialog>("Editar Veículo", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var veiculoAtualizado = result.Data as VeiculoViewModel;

            var index = Cliente.Veiculos.ToList().FindIndex(v => v.Id == veiculo.Id);
            if (index != -1)
            {
                if (Cliente.Veiculos is List<VeiculoViewModel> listaVeiculos)
                {
                    listaVeiculos[index] = veiculoAtualizado;
                }
            }

            StateHasChanged();
        }
    }

    private void RemoverVeiculo(VeiculoViewModel veiculo)
    {
        if (Cliente.Veiculos is List<VeiculoViewModel> listaVeiculos)
        {
            listaVeiculos.Remove(veiculo);
            StateHasChanged();
        }
    }
}