@layout LoginLayout

@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using AMDespachante.UI.Web.Data
@using AMDespachante.Application.Interfaces

@inject SignInManager<IdentityUser> SignInManager
@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IRecursoAppService RecursoAppService

<CustomPageTitle Titulo="Login" />

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-lg border-0 rounded-lg">
                <div class="card-header text-center" style="background-color: #E6C200; color: #000000;">
                    <h3 class="my-3"><i class="bi bi-lock-fill me-2"></i>Login</h3>
                </div>
                <div class="card-body p-4">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <div class="text-center mb-3">
                            <p class="text-muted">Entre com sua conta para acessar o sistema</p>
                        </div>
                        <hr />
                        <ValidationSummary class="text-danger rounded p-2" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Cpf" class="form-control" autocomplete="username" aria-required="true" placeholder="000.000.000-00" id="cpfInput" />
                            <label for="Cpf" class="form-label">CPF</label>
                            <ValidationMessage For="() => Input.Cpf" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="password" class="form-label">Senha</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="form-check mb-3">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" style="border-color: #FFD700;" />
                            <label class="form-check-label" for="rememberMe">
                                Lembrar de mim
                            </label>
                        </div>
                        <div class="d-grid gap-2 mb-4">
                            <button type="submit" class="btn btn-lg" style="background-color: #FFD700; color: #000000;">
                                <i class="bi bi-box-arrow-in-right me-2"></i>Entrar
                            </button>
                        </div>
                        @* <div class="text-center">
                            <div class="small mb-2">
                                <a href="Account/ForgotPassword" class="text-decoration-none" style="color: #FFD700;">
                                    <i class="bi bi-question-circle me-1"></i>Esqueceu sua senha?
                                </a>
                            </div>
                        </div> *@
                    </EditForm>
                </div>
                <div class="card-footer text-center py-3" style="background-color: #f8f9fa;">
                    <div class="small">© @DateTime.Now.Year AMDespachante</div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .btn-primary {
        background-color: #FFD700 !important;
        color: #000000 !important;
        border-color: #FFD700 !important;
    }

        .btn-primary:hover {
            background-color: #b39800 !important;
            border-color: #cca700 !important;
        }

    .bg-primary {
        background-color: #FFD700 !important;
    }

    .text-primary {
        color: #FFD700 !important;
    }

    a {
        color: #FFD700;
        text-decoration: none;
    }

        a:hover {
            color: #cca700;
            text-decoration: underline;
        }

    .form-check-input:checked {
        background-color: #E6C200 !important;
        border-color: #FFD700 !important;
    }

    .form-control:focus, .form-check-input:focus {
        border-color: #FFD700;
        box-shadow: 0 0 0 0.25rem rgba(255, 215, 0, 0.25);
    }
</style>

<script>
    function formatCPF(input) {
        let value = input.value.replace(/\D/g, '');

        if (value.length > 11) {
            value = value.substring(0, 11);
        }

        if (value.length > 0) {
            value = value.replace(/^(\d{3})(\d)/, '$1.$2');
            value = value.replace(/^(\d{3})\.(\d{3})(\d)/, '$1.$2.$3');
            value = value.replace(/\.(\d{3})(\d{2})$/, '.$1-$2');
        }

        input.value = value;
        }

        document.addEventListener('DOMContentLoaded', function() {
            var cpfInput = document.getElementById('cpfInput');
            if (cpfInput) {
                cpfInput.addEventListener('input', function(e) {
                formatCPF(e.target);
            });

                cpfInput.addEventListener('blur', function(e) {
                formatCPF(e.target);
            });
        }
    });
</script>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContextAccessor.HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContextAccessor.HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var cpfOnlyNumbers = System.Text.RegularExpressions.Regex.Replace(Input.Cpf, @"\D", "");

        var recurso = await RecursoAppService.GetByCpf(cpfOnlyNumbers);

        if (recurso is null)
        {
            errorMessage = "CPF ou Senha incorretos";
            return;
        }

        if (recurso.PrimeiroAcesso && Input.Password != "123Mud@r")
        {
            errorMessage = "CPF ou Senha incorretos.";
            return;
        }

        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(
            cpfOnlyNumbers,
            Input.Password, 
            Input.RememberMe, 
            lockoutOnFailure: false);

        if (result.Succeeded)
        {
            Logger.LogInformation("Usuário logado.");

            if (recurso.PrimeiroAcesso) 
                RedirectManager.RedirectTo("/Account/Manage/ChangePassword");
            else 
                RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Conta bloqueada");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "CPF ou Senha incorretos";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "O CPF é obrigatório")]
        public string Cpf { get; set; } = "";

        [Required(ErrorMessage = "A senha é obrigatória")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Lembrar de mim?")]
        public bool RememberMe { get; set; }
    }
}