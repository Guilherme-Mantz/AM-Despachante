@page "/veiculos/edit/{id:guid}"

@rendermode InteractiveServer

@using AMDespachante.Application.Interfaces
@using AMDespachante.Application.ViewModels
@using AMDespachante.UI.Web.Components.Shared.Veiculos
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject IClienteAppService ClienteAppService
@inject IVeiculoAppService VeiculoAppService
@inject ISnackbar Snackbar

@implements IDisposable

<CustomPageTitle Titulo="Veículos" />

<VeiculoForm Veiculo="veiculo" Clientes="clientes" OnSubmit="@(async (veiculo) => await EditarVeiculo(veiculo))" />

@code {

    [Parameter]
    public Guid Id { get; set; }

    private VeiculoViewModel veiculo { get; set; }
    private IEnumerable<ClienteViewModel> clientes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        veiculo = await VeiculoAppService.GetById(Id);
        clientes = await ClienteAppService.GetAll();
    }

    private async Task EditarVeiculo(VeiculoViewModel cliente)
    {
        var result = await VeiculoAppService.Update(cliente);
        if (!result.IsValid)
        {
            result.Errors.ToList()
                .ForEach(erro => Snackbar.Add(erro.ErrorMessage, Severity.Error, c => c.SnackbarVariant = Variant.Filled));
            return;
        }

        Snackbar.Add($"Veículo atualizado com sucesso!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);

        NavigationManager.NavigateTo("/veiculos");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
