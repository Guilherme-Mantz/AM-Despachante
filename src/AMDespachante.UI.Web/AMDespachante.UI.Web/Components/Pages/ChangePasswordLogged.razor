@page "/Account/ChangePassword"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using AMDespachante.UI.Web.Data
@using AMDespachante.Application.Interfaces
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager
@inject IRecursoAppService RecursoAppService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<CustomPageTitle Titulo="Primeiro Acesso" />

<MudContainer MaxWidth="MaxWidth.Small" Class="py-8">
    <MudPaper Elevation="3" Class="pa-4">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
                    <MudIcon Icon="@Icons.Material.Filled.LockReset" Class="mr-2" />
                    Alteração de Senha
                </MudText>

                @if (!string.IsNullOrEmpty(message))
                {
                    <MudAlert Severity="Severity.Error" Class="my-4" Variant="Variant.Filled">@message</MudAlert>
                }

                <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync">
                    <DataAnnotationsValidator />

                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Senha atual"
                            @bind-Value="Input.OldPassword"
                            For="@(() => Input.OldPassword)"
                            Variant="Variant.Outlined"
                            InputType="InputType.Password"
                            Immediate="true"
                            FullWidth="true"
                            Class="mb-3" />

                            <MudTextField Label="Nova senha"
                            @bind-Value="Input.NewPassword"
                            For="@(() => Input.NewPassword)"
                            Variant="Variant.Outlined"
                            InputType="InputType.Password"
                            Immediate="true"
                            FullWidth="true"
                            Class="mb-3" />

                            <MudTextField Label="Confirme a nova senha"
                            @bind-Value="Input.ConfirmPassword"
                            For="@(() => Input.ConfirmPassword)"
                            Variant="Variant.Outlined"
                            InputType="InputType.Password"
                            Immediate="true"
                            FullWidth="true"
                            Class="mb-4" />
                        </MudCardContent>

                        <MudCardActions Class="pb-4 px-4">
                            <MudButton Variant="Variant.Filled"
                            Color="Color.Primary"
                            Size="Size.Large"
                            StartIcon="@Icons.Material.Filled.Save"
                            FullWidth="true"
                            ButtonType="ButtonType.Submit"
                            Disabled="@isProcessing">
                                @if (isProcessing)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <span class="ms-2">Processando...</span>
                                }
                                else
                                {
                                    <span>Atualizar senha</span>
                                }
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </EditForm>
            </MudItem>
        </MudGrid>

        <MudDivider Class="mt-6 mb-3" />
        <MudText Align="Align.Center" Typo="Typo.caption">© @DateTime.Now.Year AMDespachante</MudText>
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private string? username;
    private bool isProcessing = false;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            username = user.Identity.Name;
        }
        else
        {
            NavigationManager.NavigateTo("Account/Login", forceLoad: true);
        }
    }

    private async Task OnValidSubmitAsync()
    {
        isProcessing = true;

        try
        {
            if (string.IsNullOrEmpty(username))
            {
                message = "Usuário não autenticado.";
                Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
                isProcessing = false;
                return;
            }

            var user = await UserManager.FindByNameAsync(username);
            if (user == null)
            {
                message = "Usuário não encontrado.";
                Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
                isProcessing = false;
                return;
            }

            var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
            if (!changePasswordResult.Succeeded)
            {
                message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
                Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
                isProcessing = false;
                return;
            }

            var result = await RecursoAppService.DeactiveFirtsAccess(username);

            Snackbar.Add("Senha alterada com sucesso!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            message = "Ocorreu um erro ao processar a alteração de senha.";
            Snackbar.Add(message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
            isProcessing = false;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "A senha atual é obrigatória")]
        [DataType(DataType.Password)]
        [Display(Name = "Senha Atual")]
        public string OldPassword { get; set; } = "";

        [Required(ErrorMessage = "A nova senha é obrigatória")]
        [StringLength(100, ErrorMessage = "O {0} deve ter pelo menos {2} e no máximo {1} caracteres de comprimento.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Nova Senha")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirme a Nova Senha")]
        [Compare("NewPassword", ErrorMessage = "A nova senha e a senha de confirmação não correspondem.")]
        public string ConfirmPassword { get; set; } = "";
    }
}