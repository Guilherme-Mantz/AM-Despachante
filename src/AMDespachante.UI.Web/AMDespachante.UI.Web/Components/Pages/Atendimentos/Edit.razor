@page "/atendimentos/edit/{id:guid}"

@rendermode InteractiveServer

@using AMDespachante.Application.Interfaces
@using AMDespachante.Application.ViewModels
@using AMDespachante.UI.Web.Components.Shared.Atendimentos
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject IClienteAppService ClienteAppService
@inject IAtendimentoAppService AtendimentoAppService
@inject ISnackbar Snackbar

@implements IDisposable

<CustomPageTitle Titulo="Veículos" />

<AtendimentoForm Clientes="clientes" Atendimento="atendimento" OnSubmit="@(async (atendimento) => await EditarAtendimento(atendimento))" />

@code {

    [Parameter]
    public Guid Id { get; set; }

    private AtendimentoViewModel atendimento { get; set; }
    private IEnumerable<ClienteViewModel> clientes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        atendimento = await AtendimentoAppService.GetById(Id);
        clientes = await ClienteAppService.GetAll();
    }

    private async Task EditarAtendimento(AtendimentoViewModel cliente)
    {
        var result = await AtendimentoAppService.Update(cliente);
        if (!result.IsValid)
        {
            result.Errors.ToList()
                .ForEach(erro => Snackbar.Add(erro.ErrorMessage, Severity.Error, c => c.SnackbarVariant = Variant.Filled));
            return;
        }

        Snackbar.Add($"Atendimento atualizado com sucesso!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);

        NavigationManager.NavigateTo("/atendimentos");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
