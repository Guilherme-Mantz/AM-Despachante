@page "/atendimentos/create"
@attribute [Authorize(Roles = "ADMIN")]

@rendermode InteractiveServer

@using AMDespachante.UI.Web.Components.Shared.Atendimentos
@using AMDespachante.Application.Interfaces
@using AMDespachante.Application.ViewModels
@using Microsoft.AspNetCore.Authorization

@inject IAtendimentoAppService AtendimentoAppService
@inject IClienteAppService ClienteAppService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@implements IDisposable

<CustomPageTitle Titulo="Atendimentos" />

<AtendimentoForm Clientes="clientes" OnSubmit="@(async (atendimento) => await CriarAtendimento(atendimento))" />

@code {
    private IEnumerable<ClienteViewModel> clientes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        clientes = await ClienteAppService.GetAll();
    }

    private async Task CriarAtendimento(AtendimentoViewModel atendimento)
    {
        var result = await AtendimentoAppService.Add(atendimento);

        if (!result.IsValid)
        {
            result.Errors.ToList()
                .ForEach(erro => Snackbar.Add(erro.ErrorMessage, Severity.Error, c => c.SnackbarVariant = Variant.Filled));
            return;
        }

        Snackbar.Add($"Atendimento criado com sucesso!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);
        NavigationManager.NavigateTo("/atendimentos");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
