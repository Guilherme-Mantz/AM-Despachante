@page "/recursos"

@using AMDespachante.Application.Interfaces
@using AMDespachante.Application.ViewModels
@inject IRecursoAppService RecursoAppService

@rendermode InteractiveServer

<CustomPageTitle Titulo="Recursos" />

<MudTable ServerData="ServerReload" Hover="true" Striped="true" @ref="table"
           NoRecordsContent="@(new RenderFragment(builder =>
          {
              builder.AddContent(0, new MarkupString("<MudText>Nenhum registro encontrado</MudText>"));
          }))"
          LoadingContent="@(new RenderFragment(builder =>
          {
              builder.AddContent(0, new MarkupString("<MudText>Carregando...</MudText>"));
          }))"
          PagerContent="@(new RenderFragment(builder =>
          {
              builder.AddContent(0, new MarkupString("<MudTablePager />"));
          }))">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Recursos</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>E-mail</MudTh>
        <MudTh>CPF</MudTh>
        <!-- Add other properties from RecursoViewModel -->
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Nome</MudTd>
        <MudTd>@context.Email</MudTd>
        <MudTd>@context.Cpf</MudTd>
        <!-- Map other properties -->
    </RowTemplate>

    
</MudTable>

@code {

    private MudTable<RecursoViewModel> table;
    private int totalItems;
    private string searchString = null;
    private int selectedRowNumber = -1;

    private async Task<TableData<RecursoViewModel>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            var response = await RecursoAppService.GetPagedAsync(
                page: state.Page,
                pageSize: state.PageSize,
                searchTerm: searchString
            );
            
            totalItems = response.PageCount;

            return new TableData<RecursoViewModel>()
                {
                    TotalItems = totalItems,
                    Items = response.Queryable.ToArray()
                };
        }
        catch (Exception ex)
        {
            //TODO: TOAST
            Console.WriteLine($"Erro ao carregar dados: {ex.Message}");
            return new TableData<RecursoViewModel>();
        }
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
