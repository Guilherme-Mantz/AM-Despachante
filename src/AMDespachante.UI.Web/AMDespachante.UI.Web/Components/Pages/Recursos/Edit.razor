@page "/recursos/edit/{id:guid}"

@rendermode InteractiveServer

@using AMDespachante.Application.Interfaces
@using AMDespachante.Application.ViewModels
@using AMDespachante.UI.Web.Components.Shared.Recursos

@inject NavigationManager NavigationManager
@inject IRecursoAppService RecursoAppService
@inject ISnackbar Snackbar

@implements IDisposable

<CustomPageTitle Titulo="Recursos" />

<RecursoForm Recurso="recurso" OnSubmit="@(async (recurso) => await EditarRecurso(recurso))" />

@code {

    [Parameter]
    public Guid Id { get; set; }

    private RecursoViewModel recurso { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        recurso = await RecursoAppService.GetById(Id);
    }

    private async Task EditarRecurso(RecursoViewModel recurso)
    {
        var result = await RecursoAppService.Update(recurso);
        if (!result.IsValid)
        {
            result.Errors.ToList()
                .ForEach(erro => Snackbar.Add(erro.ErrorMessage, Severity.Error, c => c.SnackbarVariant = Variant.Filled));
            return;
        }

        Snackbar.Add($"Recurso atualizado com sucesso!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);

        NavigationManager.NavigateTo("/recursos");
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);
    }
}
