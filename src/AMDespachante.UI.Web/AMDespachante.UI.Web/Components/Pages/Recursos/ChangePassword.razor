@page "/recursos/change-password/{id:guid}"
@attribute [Authorize(Roles = "ADMIN")]

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using AMDespachante.Application.Interfaces
@using AMDespachante.Application.ViewModels

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject UserManager<IdentityUser> UserManager
@inject IRecursoAppService RecursoAppService

<MudContainer MaxWidth="MaxWidth.Small" Class="pa-4">
    <MudCard Elevation="3" Class="pa-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Alterar Senha</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            }
            else if (recurso == null)
            {
                <MudAlert Severity="Severity.Error">Recurso não encontrado.</MudAlert>
            }
            else
            {
                <MudTextField T="string" @bind-Value="email" Label="Email" ReadOnly="true" FullWidth="true" Class="mb-3" />
                
                <MudTextField T="string" @bind-Value="newPassword" Label="Nova Senha" FullWidth="true"
                InputType="@(showPassword ? InputType.Text : InputType.Password)"
                Adornment="Adornment.End" AdornmentIcon="@(showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                OnAdornmentClick="() => showPassword = !showPassword" AdornmentAriaLabel="Show Password" Class="mb-3" />
                
                <MudTextField T="string" @bind-Value="confirmPassword" Label="Confirmar Senha" FullWidth="true"
                InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                Adornment="Adornment.End" AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                OnAdornmentClick="() => showConfirmPassword = !showConfirmPassword" AdornmentAriaLabel="Show Password" Class="mb-3" />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3">@errorMessage</MudAlert>
                }
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoBack" Class="mr-2">Voltar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePasswordAsync" Disabled="isProcessing || recurso == null">
                @if (isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processando</MudText>
                }
                else
                {
                    <MudText>Salvar</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private RecursoViewModel? recurso;
    private string email = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool isLoading = true;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecursoAsync();
    }

    private async Task LoadRecursoAsync()
    {
        isLoading = true;

        try
        {
            recurso = await RecursoAppService.GetById(Id);

            if (recurso != null)
            {
                email = recurso.Email;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar recurso: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SavePasswordAsync()
    {
        if (string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            errorMessage = "Preencha todos os campos de senha.";
            return;
        }

        if (newPassword != confirmPassword)
        {
            errorMessage = "As senhas não coincidem.";
            return;
        }

        if (newPassword.Length < 6)
        {
            errorMessage = "A senha deve ter pelo menos 6 caracteres.";
            return;
        }

        isProcessing = true;
        errorMessage = string.Empty;

        try
        {
            var user = await UserManager.FindByEmailAsync(email);

            if (user == null)
            {
                errorMessage = "Usuário não encontrado.";
                return;
            }

            var token = await UserManager.GeneratePasswordResetTokenAsync(user);

            var result = await UserManager.ResetPasswordAsync(user, token, newPassword);

            if (result.Succeeded)
            {
                Snackbar.Add("Senha alterada com sucesso!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);
                NavigationManager.NavigateTo("/recursos");
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao alterar senha: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/recursos");
    }
}